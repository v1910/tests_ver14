{"ast":null,"code":"//HeaderPhrasesList.js------------------\nimport React from'react';import{useSelector,useDispatch}from'react-redux';import\"./HeaderPhrasesList.css\";import{jsx as _jsx}from\"react/jsx-runtime\";var list_test_wrapper=null;var list_words_wrapper=null;var list_listen_wrapper=null;var nPhrases=null;var list_phrases_wrapper=null;var phrases_collections=null;var all_input_sections=null;export function HeaderPhrasesList(){//console.log('HeaderPhrasesList -------------');\nvar dispatch=useDispatch();list_phrases_wrapper=useSelector(function(store){return store.list_phrases_wrapper;});phrases_collections=useSelector(function(store){return store.phrases_collections;});all_input_sections=useSelector(function(store){return store.all_input_sections;});nPhrases=phrases_collections.length;//console.log('1 HeaderPhrasesList:  list_phrases_wrapper=',list_phrases_wrapper);\n//console.log('HeaderTestsList phrases_collections=',phrases_collections);\nvar work2=[];var work3='';var _loop=function _loop(kk){work3=phrases_collections[kk-1].toUpperCase();work2[kk-1]=/*#__PURE__*/_jsx(\"div\",{id:work3,class:\"menu_phrases\",fontSize:\"11px\",value:kk,onClick:function onClick(){dispatch({type:'HeaderPhrasesList',payload:{currentPhrases:phrases_collections[kk-1],showHideTest:'showHidePhrases',showHideWords:'showHidePhrases',showHideListen:'showHidePhrases',showHidePhrases:'showHidePhrases',showHideJokes:'showHidePhrases',showHideStatistics:'showHidePhrases',list_tests_wrapper:false,list_words_wrapper:false,list_listen_wrapper:false,phrases:'',statistics_wrapper_visibility:{display:'none'},all_input_sections:{_id:0,all_input_tests:all_input_sections.all_input_tests,all_input_words:all_input_sections.all_input_words,all_input_listen:all_input_sections.all_input_listen,all_input_phrases:all_input_sections.all_input_phrases+1,all_input_jokes:all_input_sections.all_input_jokes,all_input_statistics:all_input_sections.all_input_statistics}}});},children:work3},kk);};for(var kk=1;kk<=nPhrases;kk++){_loop(kk);}if(list_phrases_wrapper==='visible')return work2;else return null;}// end of HeaderListenList------------\n/*\n\nlet dispatch = useDispatch();  \n\nuseEffect(() => {\n  fetch('/getGreatings')\n  .then(response => response.json())\n  .then(phrases => {\n    dispatch({type: 'ShowCurrentPhrases', \n      payload: {\n        phrases: phrases\n      }\n    })\n\n  })\n});\n\n*/","map":{"version":3,"sources":["/home/test/Public/tests/src/components/headerPhrasesList/HeaderPhrasesList.js"],"names":["React","useSelector","useDispatch","list_test_wrapper","list_words_wrapper","list_listen_wrapper","nPhrases","list_phrases_wrapper","phrases_collections","all_input_sections","HeaderPhrasesList","dispatch","store","length","work2","work3","kk","toUpperCase","type","payload","currentPhrases","showHideTest","showHideWords","showHideListen","showHidePhrases","showHideJokes","showHideStatistics","list_tests_wrapper","phrases","statistics_wrapper_visibility","display","_id","all_input_tests","all_input_words","all_input_listen","all_input_phrases","all_input_jokes","all_input_statistics"],"mappings":"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","sourcesContent":["//HeaderPhrasesList.js------------------\n\nimport React from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport  \"./HeaderPhrasesList.css\";\n\n\nlet list_test_wrapper       = null;\n\nlet list_words_wrapper      = null;\n\nlet list_listen_wrapper     = null;\n\nlet nPhrases                = null;\n\nlet list_phrases_wrapper    = null;\n\nlet phrases_collections     = null;\n\nlet all_input_sections      = null;\n\nexport function HeaderPhrasesList() {\n\n//console.log('HeaderPhrasesList -------------');\n\n\n    let dispatch = useDispatch();  \n\n    \n    list_phrases_wrapper = useSelector((store) => store.list_phrases_wrapper);\n\n    phrases_collections = useSelector((store) => store.phrases_collections);\n\n    all_input_sections = useSelector((store) => store.all_input_sections);\n\n    \n\n    nPhrases = phrases_collections.length;\n\n//console.log('1 HeaderPhrasesList:  list_phrases_wrapper=',list_phrases_wrapper);\n//console.log('HeaderTestsList phrases_collections=',phrases_collections);\n    \n    let work2 = [];\n    let work3 = '';\n\n    for(let kk = 1; kk <= nPhrases; kk++){\n            work3 = phrases_collections[kk-1].toUpperCase();\n            work2[kk-1] =  (<div id={work3} class=\"menu_phrases\" \n                                               fontSize=\"11px\" \n                                               key = {kk}\n                                               value = {kk}\n                                                onClick =    {() => {   dispatch({  type: 'HeaderPhrasesList', \n                                                                                    payload: {\n                                                                                        currentPhrases:     phrases_collections[kk-1], \n                                                                                        showHideTest:       'showHidePhrases',\n                                                                                        showHideWords:      'showHidePhrases',  \n                                                                                        showHideListen:     'showHidePhrases',                                                                                  \n                                                                                        showHidePhrases:    'showHidePhrases',    \n                                                                                        showHideJokes:      'showHidePhrases',\n                                                                                        showHideStatistics: 'showHidePhrases', \n                                                                                        list_tests_wrapper: false,\n                                                                                        list_words_wrapper: false,\n                                                                                        list_listen_wrapper:false,\n                                                                                        phrases:            '',\n                                                                                        statistics_wrapper_visibility: {display: 'none'},\n                                                                                        all_input_sections:  \n                                                                                        {\n                                                                                            _id: 0,\n                                                                                            all_input_tests: all_input_sections.all_input_tests,\n                                                                                            all_input_words: all_input_sections.all_input_words,\n                                                                                            all_input_listen: all_input_sections.all_input_listen,\n                                                                                            all_input_phrases: all_input_sections.all_input_phrases + 1,\n                                                                                            all_input_jokes: all_input_sections.all_input_jokes,\n                                                                                            all_input_statistics: all_input_sections.all_input_statistics\n                                                                                        }\n                                                                                    }\n                                                                                });\n\n                                                                    }\n                                                            }\n                            >\n                                {work3}\n                            </div>)\n    }\n\n\n    if(list_phrases_wrapper === 'visible') return work2\n    else return null;\n\n\n}// end of HeaderListenList------------\n\n/*\n\nlet dispatch = useDispatch();  \n\nuseEffect(() => {\n  fetch('/getGreatings')\n  .then(response => response.json())\n  .then(phrases => {\n    dispatch({type: 'ShowCurrentPhrases', \n      payload: {\n        phrases: phrases\n      }\n    })\n\n  })\n});\n\n*/"]},"metadata":{},"sourceType":"module"}