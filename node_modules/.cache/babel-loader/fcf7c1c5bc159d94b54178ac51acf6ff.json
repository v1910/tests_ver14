{"ast":null,"code":"import _defineProperty from\"/home/test/Public/tests/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";//HeaderTestsList.js------------------\nimport React from'react';import{useSelector,useDispatch}from'react-redux';import\"./HeaderTestsList.css\";//import  \"../scrollToTopBtn/scrollToTopBtn.css\";\n//import  \"../scrollToTopBtn/scrollToTopBtn.js\";\n//import  { ShowCurrentTest } from \"../showCurrentTest/ShowCurrentTest.js\";\nimport{jsx as _jsx}from\"react/jsx-runtime\";var list_tests_wrapper=null;var all_input_sections=null;export function HeaderTestsList(){//console.log('HeaderTestsList -------------');\nvar dispatch=useDispatch();var tests=useSelector(function(store){return store.tests;});var currentTests=useSelector(function(store){return store.currentTest;});list_tests_wrapper=useSelector(function(store){return store.list_tests_wrapper;});all_input_sections=useSelector(function(store){return store.all_input_sections;});//console.log('1 HeaderTestsList:  all_input_sections=',all_input_sections);\n//    console.log('HeaderTestsList count_questions_test=',count_questions_test);\nvar work2=[];var work3='';//    work_state_test[0] = false;\n//    const passNumberTest = e => dispatch({type: 'SET_TESTS', currentTest: e.currentTarget.value});\nvar _loop=function _loop(kk){work3='TEST'+kk+'(B1)';work2[kk-1]=/*#__PURE__*/_jsx(\"div\",{id:work3,class:\"menu_test_list\",value:kk,onClick:function onClick(){var _payload;return dispatch({type:'HeaderTestsList',payload:(_payload={currentTest:kk-1,showHideTest:true,list_tests_wrapper:'hidden',countDownDate:new Date().getTime(),// start time for the chosing test\ncountDownDate_qst:new Date().getTime(),// start time for the chose question\nstate_test:Array(tests[currentTests].length).fill(true),state_green_red:Array(tests[currentTests].length).fill([-1,-1]),firstTimer:null},_defineProperty(_payload,\"showHideTest\",'showHideTest'),_defineProperty(_payload,\"showHideWords\",'showHideTest'),_defineProperty(_payload,\"showHideListen\",'showHideTest'),_defineProperty(_payload,\"showHidePrases\",'showHideTest'),_defineProperty(_payload,\"showHideJokes\",'showHideTest'),_defineProperty(_payload,\"showHideStatistics\",'showHideTest'),_defineProperty(_payload,\"prases\",null),_defineProperty(_payload,\"phrases_wrapper_visibility\",{display:'none'}),_defineProperty(_payload,\"all_input_sections\",{all_input_tests:all_input_sections.all_input_tests+1,all_input_words:all_input_sections.all_input_words,all_input_listen:all_input_sections.all_input_listen,all_input_phrases:all_input_sections.all_input_phrases,all_input_jokes:all_input_sections.all_input_jokes,all_input_statistics:all_input_sections.all_input_statistics}),_payload)});},children:work3},kk);};for(var kk=1;kk<=tests.length;kk++){_loop(kk);}if(list_tests_wrapper==='visible')return work2;else return null;}// end of HeaderTestsList------------\n//                                               fontSize=\"16px\"","map":{"version":3,"sources":["/home/test/Public/tests/src/components/headerTestsList/HeaderTestsList.js"],"names":["React","useSelector","useDispatch","list_tests_wrapper","all_input_sections","HeaderTestsList","dispatch","tests","store","currentTests","currentTest","work2","work3","kk","type","payload","showHideTest","countDownDate","Date","getTime","countDownDate_qst","state_test","Array","length","fill","state_green_red","firstTimer","display","all_input_tests","all_input_words","all_input_listen","all_input_phrases","all_input_jokes","all_input_statistics"],"mappings":"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","sourcesContent":["//HeaderTestsList.js------------------\n\nimport React from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport  \"./HeaderTestsList.css\";\n\n//import  \"../scrollToTopBtn/scrollToTopBtn.css\";\n\n//import  \"../scrollToTopBtn/scrollToTopBtn.js\";\n\n\n//import  { ShowCurrentTest } from \"../showCurrentTest/ShowCurrentTest.js\";\n\nlet list_tests_wrapper        = null;\n\nlet all_input_sections        = null;\n\n\nexport function HeaderTestsList() {\n\n//console.log('HeaderTestsList -------------');\n\n\n    let dispatch = useDispatch();  \n\n    \n    const tests           = useSelector((store) => store.tests);\n\n    const currentTests    = useSelector((store) => store.currentTest);\n\n    list_tests_wrapper    = useSelector((store) => store.list_tests_wrapper); \n\n    all_input_sections    = useSelector((store) => store.all_input_sections); \n\n\n//console.log('1 HeaderTestsList:  all_input_sections=',all_input_sections);\n//    console.log('HeaderTestsList count_questions_test=',count_questions_test);\n    \n    let work2 = [];\n    let work3 = '';\n\n//    work_state_test[0] = false;\n\n//    const passNumberTest = e => dispatch({type: 'SET_TESTS', currentTest: e.currentTarget.value});\n\n\n    for(let kk = 1; kk <= tests.length; kk++){\n            work3 = 'TEST' + kk + '(B1)';\n            work2[kk-1] =  (<div id={work3} class=\"menu_test_list\" \n                                               key = {kk}\n                                               value = {kk}\n                                               onClick =    {() => dispatch({  type: 'HeaderTestsList', \n                                                                                payload: {\n                                                                                    currentTest:        kk-1, \n                                                                                    showHideTest:       true,\n                                                                                    list_tests_wrapper: 'hidden',\n                                                                                    countDownDate:      new Date().getTime(), // start time for the chosing test\n                                                                                    countDownDate_qst:  new Date().getTime(), // start time for the chose question\n                                                                                    state_test:         Array(tests[currentTests].length).fill(true),\n                                                                                    state_green_red:    Array(tests[currentTests].length).fill([-1,-1]),\n                                                                                    firstTimer:         null,\n                                                                                    showHideTest:       'showHideTest',\n                                                                                    showHideWords:      'showHideTest',\n                                                                                    showHideListen:     'showHideTest',\n                                                                                    showHidePrases:     'showHideTest',\n                                                                                    showHideJokes:      'showHideTest',\n                                                                                    showHideStatistics: 'showHideTest',\n                                                                                    prases:             null,\n                                                                                    phrases_wrapper_visibility: {display: 'none'},\n                                                                                    all_input_sections:  \n                                                                                        {\n                                                                                            all_input_tests: all_input_sections.all_input_tests + 1,\n                                                                                            all_input_words: all_input_sections.all_input_words,\n                                                                                            all_input_listen: all_input_sections.all_input_listen,\n                                                                                            all_input_phrases: all_input_sections.all_input_phrases,\n                                                                                            all_input_jokes: all_input_sections.all_input_jokes,\n                                                                                            all_input_statistics: all_input_sections.all_input_statistics\n                                                                                        }\n                                                                                }\n                                                                            })\n                                                            }\n                            >\n                                {work3}\n                            </div>)\n    }\n    if(list_tests_wrapper === 'visible') return work2\n    else return null;\n\n}// end of HeaderTestsList------------\n\n//                                               fontSize=\"16px\" \n"]},"metadata":{},"sourceType":"module"}