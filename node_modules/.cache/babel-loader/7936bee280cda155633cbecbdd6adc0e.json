{"ast":null,"code":"//Tests.js------Show chosen Test\nimport React,{useEffect}from'react';import{useSelector}from'react-redux';import{ShowCurrentTest}from\"../showCurrentTest/ShowCurrentTest.js\";import'../scrollToTopBtn/scrollToTopBtn.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export function Tests(){var showHideTest=useSelector(function(store){return store.showHideTest;});var showCurrentTestWork=null;//    let script = document.createElement('script');\n//    script.src = '../scrollToTopBtn/scrollToTopBtn.js';\n//    document.head.append(script);\n//    script.onload = scriptScrollToTopBtn();\n/*\n    useEffect(() => {\n\n        //Get the button\n        let scrollToTopBtn = document.getElementById('scrollToTopBtn');\n        console.log('scrollToTopBtn =',scrollToTopBtn);\n\n        let rootElement = document.documentElement;\n\n        function handleScroll(){\n            //Do answering on scroll\n            let scrollTotal = rootElement.scrollHeight -\n                rootElement.clientHeight;\n                if(rootElement.scrolling / scrollTotal > 0.0) {\n                    //Show button\n                    scrollToTopBtn.classList.add('showBtn');\n                } else {\n                    //Hide button\n                    scrollToTopBtn.classList.remove('showBtn');\n                }\n        }//end of handleScroll\n\n        function scrollToTop(){\n            //scroll to top logic\n            rootElement.scrollTo({\n                top: 0,\n                behavior: 'smooth'\n            });\n        }//end of scrollToTop\n\n\n        //When the user clicks on the button, scroll to the top of the document\n        function topFunction(){\n            document.body.scrollTop = 0;\n            document.documentElement.scrollTop = 0;\n        }//end of topFunction\n\n        scrollToTopBtn.addEventListener('click', scrollToTop);\n        document.addEventListener('scroll',handleScroll);\n\n    });//useEffect\n*/ /*        \n\n        //When the user scroll down for 20px from the top of the document, show the button\n        window.onscroll = function() {scrollFunction()};\n\n        function scrollFunction() {\n            if(document.body.scrollTop > 100 || document.documentElement.scrolling > 100) {\n                scrollToTopBtn.style.display = 'block';\n            } else {\n                scrollToTopBtn.style.display = 'none';\n            }\n        }//end of scrollFunction\n\n\n        let target = document.getElementById('footerBtn');\n\n        let scrollToTopBtn = document.getElementById('scrollToTopBtn');\n    \n        let rootElement = document.documentElement;\n    \n    \n        function callback(entries, observer){\n            // The callback will return an array of entries, even if you are observing a single item\n            entries.forEach(entry => {\n                if (entry.isIntersecting){\n                    //show button\n                    scrollToTopBtn.classList.add('showBtn');\n                } else {\n                    //Hide button\n                    scrollToTopBtn.classList.remove('showBtn');\n                }\n            });\n        }//end of callback\n    \n        function scrollToTop(){\n            rootElement.scrollTo({\n                top: 0,\n                behavior: 'smooth'\n            });\n        }\n    \n        scrollToTopBtn.addEventListener('click', scrollToTop);\n    \n        let observer = new IntersectionObserver(callback);\n    \n        observer.observe(target);\n  */if(showHideTest==='showHideTest')showCurrentTestWork=/*#__PURE__*/_jsx(ShowCurrentTest,{});//<ShowCurrentTest parCallback = {testCallback} />;\nelse showCurrentTestWork=null;return/*#__PURE__*/_jsxs(\"section\",{id:\"tests_wrapper\",children:[showCurrentTestWork,/*#__PURE__*/_jsx(\"div\",{id:\"footerBtn\"})]});}//        <button id='scrollToTopBtn' title='Go to top'>Top</button>","map":{"version":3,"sources":["/home/test/Public/tests/src/components/tests/Tests.js"],"names":["React","useEffect","useSelector","ShowCurrentTest","Tests","showHideTest","store","showCurrentTestWork"],"mappings":"AAAA;AAEA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,WAAT,KAA4B,aAA5B,CACA,OAAUC,eAAV,KAAiC,uCAAjC,CACA,MAAO,sCAAP,C,wFAEA,MAAO,SAASC,CAAAA,KAAT,EAAiB,CAEpB,GAAIC,CAAAA,YAAY,CAAGH,WAAW,CAAC,SAACI,KAAD,QAAWA,CAAAA,KAAK,CAACD,YAAjB,EAAD,CAA9B,CAEA,GAAIE,CAAAA,mBAAmB,CAAG,IAA1B,CAEJ;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAvDwB,CAyDxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAII,GAAGF,YAAY,GAAK,cAApB,CAAoCE,mBAAmB,cAAG,KAAC,eAAD,IAAtB,CAA0C;AAA9E,IACKA,CAAAA,mBAAmB,CAAG,IAAtB,CAEL,mBAAO,iBAAS,EAAE,CAAC,eAAZ,WAEFA,mBAFE,cAGH,YAAK,EAAE,CAAC,WAAR,EAHG,GAAP,CAKH,CAED","sourcesContent":["//Tests.js------Show chosen Test\n\nimport React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport  { ShowCurrentTest } from \"../showCurrentTest/ShowCurrentTest.js\";\nimport '../scrollToTopBtn/scrollToTopBtn.css';\n\nexport function Tests() {\n\n    let showHideTest = useSelector((store) => store.showHideTest);\n\n    let showCurrentTestWork = null;\n\n//    let script = document.createElement('script');\n    \n//    script.src = '../scrollToTopBtn/scrollToTopBtn.js';\n\n//    document.head.append(script);\n\n//    script.onload = scriptScrollToTopBtn();\n\n/*\n    useEffect(() => {\n\n        //Get the button\n        let scrollToTopBtn = document.getElementById('scrollToTopBtn');\n        console.log('scrollToTopBtn =',scrollToTopBtn);\n\n        let rootElement = document.documentElement;\n\n        function handleScroll(){\n            //Do answering on scroll\n            let scrollTotal = rootElement.scrollHeight -\n                rootElement.clientHeight;\n                if(rootElement.scrolling / scrollTotal > 0.0) {\n                    //Show button\n                    scrollToTopBtn.classList.add('showBtn');\n                } else {\n                    //Hide button\n                    scrollToTopBtn.classList.remove('showBtn');\n                }\n        }//end of handleScroll\n\n        function scrollToTop(){\n            //scroll to top logic\n            rootElement.scrollTo({\n                top: 0,\n                behavior: 'smooth'\n            });\n        }//end of scrollToTop\n\n\n        //When the user clicks on the button, scroll to the top of the document\n        function topFunction(){\n            document.body.scrollTop = 0;\n            document.documentElement.scrollTop = 0;\n        }//end of topFunction\n\n        scrollToTopBtn.addEventListener('click', scrollToTop);\n        document.addEventListener('scroll',handleScroll);\n\n    });//useEffect\n*/  \n    \n/*        \n\n        //When the user scroll down for 20px from the top of the document, show the button\n        window.onscroll = function() {scrollFunction()};\n\n        function scrollFunction() {\n            if(document.body.scrollTop > 100 || document.documentElement.scrolling > 100) {\n                scrollToTopBtn.style.display = 'block';\n            } else {\n                scrollToTopBtn.style.display = 'none';\n            }\n        }//end of scrollFunction\n\n\n        let target = document.getElementById('footerBtn');\n\n        let scrollToTopBtn = document.getElementById('scrollToTopBtn');\n    \n        let rootElement = document.documentElement;\n    \n    \n        function callback(entries, observer){\n            // The callback will return an array of entries, even if you are observing a single item\n            entries.forEach(entry => {\n                if (entry.isIntersecting){\n                    //show button\n                    scrollToTopBtn.classList.add('showBtn');\n                } else {\n                    //Hide button\n                    scrollToTopBtn.classList.remove('showBtn');\n                }\n            });\n        }//end of callback\n    \n        function scrollToTop(){\n            rootElement.scrollTo({\n                top: 0,\n                behavior: 'smooth'\n            });\n        }\n    \n        scrollToTopBtn.addEventListener('click', scrollToTop);\n    \n        let observer = new IntersectionObserver(callback);\n    \n        observer.observe(target);\n  */  \n\n\n\n    if(showHideTest === 'showHideTest') showCurrentTestWork = <ShowCurrentTest /> //<ShowCurrentTest parCallback = {testCallback} />;\n    else showCurrentTestWork = null;\n\n    return <section id=\"tests_wrapper\">\n\n        {showCurrentTestWork}\n        <div id='footerBtn'></div>\n    </section>\n}\n\n//        <button id='scrollToTopBtn' title='Go to top'>Top</button>"]},"metadata":{},"sourceType":"module"}