{"ast":null,"code":"//Phrases.js------------------\n// Show Phrases\nimport React from'react';import'./Phrases.css';import{useSelector,useDispatch}from'react-redux';import{useEffect}from'react';import{ShowCurrentPhrases}from\"../showCurrentPhrases/ShowCurrentPhrases.js\";import{jsx as _jsx}from\"react/jsx-runtime\";var showHidePhrases=null;var showCurrentPhrasesWork=null;var currentPhrases=null;var currentPhrasesServer=null;var phrases_wrapper_visibility=null;export function Phrases(){//console.log('Phrases +++++++++++')     \nshowHidePhrases=useSelector(function(store){return store.showHidePhrases;});currentPhrases=useSelector(function(store){return store.currentPhrases;});phrases_wrapper_visibility=useSelector(function(store){return store.phrases_wrapper_visibility;});var dispatch=useDispatch();if(currentPhrases!==null){currentPhrasesServer='/get'+currentPhrases;}else currentPhrasesServer='/home';//console.log('Phrases: currentPhrases=',currentPhrases);\n//console.log('Phrases: currentPhrasesServer=',currentPhrasesServer);\nuseEffect(function(){fetch(currentPhrasesServer).then(function(response){return response.json();}).then(function(phrases){dispatch({type:'ShowCurrentPhrases',payload:{phrases:phrases}});});});//console.log('Phrases: showHidePhrases=',showHidePhrases);     \n//console.log('Phrases: showCurrentPhrasesWork=',showCurrentPhrasesWork);\nif(showHidePhrases==='showHidePhrases')showCurrentPhrasesWork=/*#__PURE__*/_jsx(ShowCurrentPhrases,{});else showCurrentPhrasesWork=null;return/*#__PURE__*/_jsx(\"section\",{id:\"phrases_wrapper\",children:showCurrentPhrasesWork});}//end of Phrases.js","map":{"version":3,"sources":["/home/test/Public/tests/src/components/phrases/Phrases.js"],"names":["React","useSelector","useDispatch","useEffect","ShowCurrentPhrases","showHidePhrases","showCurrentPhrasesWork","currentPhrases","currentPhrasesServer","phrases_wrapper_visibility","Phrases","store","dispatch","fetch","then","response","json","phrases","type","payload"],"mappings":"AAAA;AACA;AAEA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAO,eAAP,CAEA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CAEA,OAASC,SAAT,KAA0B,OAA1B,CAEA,OAAUC,kBAAV,KAAoC,6CAApC,C,2CAEA,GAAIC,CAAAA,eAAe,CAAe,IAAlC,CAEA,GAAIC,CAAAA,sBAAsB,CAAQ,IAAlC,CAEA,GAAIC,CAAAA,cAAc,CAAgB,IAAlC,CAEA,GAAIC,CAAAA,oBAAoB,CAAU,IAAlC,CAEA,GAAIC,CAAAA,0BAA0B,CAAI,IAAlC,CAGA,MAAO,SAASC,CAAAA,OAAT,EAAmB,CAC1B;AAEIL,eAAe,CAAGJ,WAAW,CAAC,SAACU,KAAD,QAAWA,CAAAA,KAAK,CAACN,eAAjB,EAAD,CAA7B,CAEAE,cAAc,CAAGN,WAAW,CAAC,SAACU,KAAD,QAAWA,CAAAA,KAAK,CAACJ,cAAjB,EAAD,CAA5B,CAEAE,0BAA0B,CAAGR,WAAW,CAAC,SAACU,KAAD,QAAWA,CAAAA,KAAK,CAACF,0BAAjB,EAAD,CAAxC,CAEA,GAAIG,CAAAA,QAAQ,CAAGV,WAAW,EAA1B,CAEA,GAAGK,cAAc,GAAK,IAAtB,CAA4B,CACxBC,oBAAoB,CAAG,OAASD,cAAhC,CACH,CAFD,IAEOC,CAAAA,oBAAoB,CAAG,OAAvB,CAGX;AACA;AAIIL,SAAS,CAAC,UAAM,CACZU,KAAK,CAACL,oBAAD,CAAL,CACCM,IADD,CACM,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAT,EAAJ,EADd,EAECF,IAFD,CAEM,SAAAG,OAAO,CAAI,CACbL,QAAQ,CAAC,CAACM,IAAI,CAAE,oBAAP,CACTC,OAAO,CAAE,CACLF,OAAO,CAAEA,OADJ,CADA,CAAD,CAAR,CAMH,CATD,EAUH,CAXQ,CAAT,CAaJ;AACA;AAEI,GAAGZ,eAAe,GAAK,iBAAvB,CAA0CC,sBAAsB,cAAG,KAAC,kBAAD,IAAzB,CAA1C,IACMA,CAAAA,sBAAsB,CAAG,IAAzB,CAEN,mBAAO,gBAAS,EAAE,CAAC,iBAAZ,UAEFA,sBAFE,EAAP,CAKH","sourcesContent":["//Phrases.js------------------\n// Show Phrases\n\nimport React from 'react';\n\nimport './Phrases.css';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { useEffect } from 'react';\n\nimport  { ShowCurrentPhrases } from \"../showCurrentPhrases/ShowCurrentPhrases.js\";\n\nlet showHidePhrases             = null;\n\nlet showCurrentPhrasesWork      = null;\n\nlet currentPhrases              = null;\n\nlet currentPhrasesServer        = null;\n\nlet phrases_wrapper_visibility  = null;\n\n\nexport function Phrases() {\n//console.log('Phrases +++++++++++')     \n\n    showHidePhrases = useSelector((store) => store.showHidePhrases);\n\n    currentPhrases = useSelector((store) => store.currentPhrases);\n\n    phrases_wrapper_visibility = useSelector((store) => store.phrases_wrapper_visibility);\n\n    let dispatch = useDispatch();\n    \n    if(currentPhrases !== null) {\n        currentPhrasesServer = '/get' + currentPhrases;\n    } else currentPhrasesServer = '/home';\n\n\n//console.log('Phrases: currentPhrases=',currentPhrases);\n//console.log('Phrases: currentPhrasesServer=',currentPhrasesServer);\n\n\n\n    useEffect(() => {\n        fetch(currentPhrasesServer)\n        .then(response => response.json())\n        .then(phrases => {\n            dispatch({type: 'ShowCurrentPhrases', \n            payload: {\n                phrases: phrases\n            }\n            })\n\n        })\n    });\n\n//console.log('Phrases: showHidePhrases=',showHidePhrases);     \n//console.log('Phrases: showCurrentPhrasesWork=',showCurrentPhrasesWork);\n\n    if(showHidePhrases === 'showHidePhrases') showCurrentPhrasesWork = <ShowCurrentPhrases />\n    else  showCurrentPhrasesWork = null;\n\n    return <section id=\"phrases_wrapper\">\n\n        {showCurrentPhrasesWork}\n\n    </section>    \n}//end of Phrases.js\n\n"]},"metadata":{},"sourceType":"module"}