{"ast":null,"code":"//Tests.js------Show chosen Test\nimport React,{useEffect}from'react';import{useSelector}from'react-redux';import{ShowCurrentTest}from\"../showCurrentTest/ShowCurrentTest.js\";import'../scrollToTopBtn/scrollToTopBtn.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export function Tests(){var showHideTest=useSelector(function(store){return store.showHideTest;});var showCurrentTestWork=null;//    let script = document.createElement('script');\n//    script.src = '../scrollToTopBtn/scrollToTopBtn.js';\n//    document.head.append(script);\n//    script.onload = scriptScrollToTopBtn();\nuseEffect(function(){var target=document.getElementById('footerBtn');var scrollToTopBtn=document.querySelector('.scrollToTopBtn');var rootElement=document.documentElement;function callback(entries,observer){// The callback will return an array of entries, even if you are observing a single item\nentries.forEach(function(entry){if(entry.isIntersecting){//show button\nscrollToTopBtn.classList.add('showBtn');}else{//Hide button\nscrollToTopBtn.classList.remove('showBtn');}});}//end of callback\nfunction scrollToTop(){rootElement.scrollTo({top:0,behavior:'smooth'});}scrollToTopBtn.addEventListener('click',scrollToTop);var observer=new IntersectionObserver(callback);observer.observe(target);});if(showHideTest==='showHideTest')showCurrentTestWork=/*#__PURE__*/_jsx(ShowCurrentTest,{});//<ShowCurrentTest parCallback = {testCallback} />;\nelse showCurrentTestWork=null;return/*#__PURE__*/_jsxs(\"section\",{id:\"tests_wrapper\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:\"scrollToTop()\",className:\"scrollToTopBtn\",title:\"Go to top\",children:\"Top\"}),showCurrentTestWork,/*#__PURE__*/_jsx(\"div\",{id:\"footerBtn\"})]});}","map":{"version":3,"sources":["/home/test/Public/tests/src/components/tests/Tests.js"],"names":["React","useEffect","useSelector","ShowCurrentTest","Tests","showHideTest","store","showCurrentTestWork","target","document","getElementById","scrollToTopBtn","querySelector","rootElement","documentElement","callback","entries","observer","forEach","entry","isIntersecting","classList","add","remove","scrollToTop","scrollTo","top","behavior","addEventListener","IntersectionObserver","observe"],"mappings":"AAAA;AAEA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,WAAT,KAA4B,aAA5B,CACA,OAAUC,eAAV,KAAiC,uCAAjC,CACA,MAAO,sCAAP,C,wFAEA,MAAO,SAASC,CAAAA,KAAT,EAAiB,CAEpB,GAAIC,CAAAA,YAAY,CAAGH,WAAW,CAAC,SAACI,KAAD,QAAWA,CAAAA,KAAK,CAACD,YAAjB,EAAD,CAA9B,CAEA,GAAIE,CAAAA,mBAAmB,CAAG,IAA1B,CAEJ;AAEA;AAEA;AAEA;AAEIN,SAAS,CAAC,UAAM,CACZ,GAAIO,CAAAA,MAAM,CAAGC,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAb,CAEA,GAAIC,CAAAA,cAAc,CAAGF,QAAQ,CAACG,aAAT,CAAuB,iBAAvB,CAArB,CAEA,GAAIC,CAAAA,WAAW,CAAGJ,QAAQ,CAACK,eAA3B,CAGA,QAASC,CAAAA,QAAT,CAAkBC,OAAlB,CAA2BC,QAA3B,CAAoC,CAChC;AACAD,OAAO,CAACE,OAAR,CAAgB,SAAAC,KAAK,CAAI,CACrB,GAAIA,KAAK,CAACC,cAAV,CAAyB,CACrB;AACAT,cAAc,CAACU,SAAf,CAAyBC,GAAzB,CAA6B,SAA7B,EACH,CAHD,IAGO,CACH;AACAX,cAAc,CAACU,SAAf,CAAyBE,MAAzB,CAAgC,SAAhC,EACH,CACJ,CARD,EASH;AAED,QAASC,CAAAA,WAAT,EAAsB,CAClBX,WAAW,CAACY,QAAZ,CAAqB,CACjBC,GAAG,CAAE,CADY,CAEjBC,QAAQ,CAAE,QAFO,CAArB,EAIH,CAEDhB,cAAc,CAACiB,gBAAf,CAAgC,OAAhC,CAAyCJ,WAAzC,EAEA,GAAIP,CAAAA,QAAQ,CAAG,GAAIY,CAAAA,oBAAJ,CAAyBd,QAAzB,CAAf,CAEAE,QAAQ,CAACa,OAAT,CAAiBtB,MAAjB,EAEH,CAlCQ,CAAT,CAqCA,GAAGH,YAAY,GAAK,cAApB,CAAoCE,mBAAmB,cAAG,KAAC,eAAD,IAAtB,CAA0C;AAA9E,IACKA,CAAAA,mBAAmB,CAAG,IAAtB,CAEL,mBAAO,iBAAS,EAAE,CAAC,eAAZ,wBACH,eAAQ,OAAO,CAAC,eAAhB,CAAgC,SAAS,CAAC,gBAA1C,CAA2D,KAAK,CAAC,WAAjE,iBADG,CAEFA,mBAFE,cAGH,YAAK,EAAE,CAAC,WAAR,EAHG,GAAP,CAKH","sourcesContent":["//Tests.js------Show chosen Test\n\nimport React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport  { ShowCurrentTest } from \"../showCurrentTest/ShowCurrentTest.js\";\nimport '../scrollToTopBtn/scrollToTopBtn.css';\n\nexport function Tests() {\n\n    let showHideTest = useSelector((store) => store.showHideTest);\n\n    let showCurrentTestWork = null;\n\n//    let script = document.createElement('script');\n    \n//    script.src = '../scrollToTopBtn/scrollToTopBtn.js';\n\n//    document.head.append(script);\n\n//    script.onload = scriptScrollToTopBtn();\n\n    useEffect(() => {\n        let target = document.getElementById('footerBtn');\n\n        let scrollToTopBtn = document.querySelector('.scrollToTopBtn');\n    \n        let rootElement = document.documentElement;\n    \n    \n        function callback(entries, observer){\n            // The callback will return an array of entries, even if you are observing a single item\n            entries.forEach(entry => {\n                if (entry.isIntersecting){\n                    //show button\n                    scrollToTopBtn.classList.add('showBtn');\n                } else {\n                    //Hide button\n                    scrollToTopBtn.classList.remove('showBtn');\n                }\n            });\n        }//end of callback\n    \n        function scrollToTop(){\n            rootElement.scrollTo({\n                top: 0,\n                behavior: 'smooth'\n            });\n        }\n    \n        scrollToTopBtn.addEventListener('click', scrollToTop);\n    \n        let observer = new IntersectionObserver(callback);\n    \n        observer.observe(target);\n    \n    });\n\n\n    if(showHideTest === 'showHideTest') showCurrentTestWork = <ShowCurrentTest /> //<ShowCurrentTest parCallback = {testCallback} />;\n    else showCurrentTestWork = null;\n\n    return <section id=\"tests_wrapper\">\n        <button onClick='scrollToTop()' className='scrollToTopBtn' title='Go to top'>Top</button>\n        {showCurrentTestWork}\n        <div id='footerBtn'></div>\n    </section>\n}\n"]},"metadata":{},"sourceType":"module"}