{"ast":null,"code":"//HeaderPhrasesList.js------------------\nimport React from'react';import{useSelector,useDispatch}from'react-redux';import{useEffect}from'react';import\"./HeaderPhrasesList.css\";import{jsx as _jsx}from\"react/jsx-runtime\";var list_test_wrapper=null;var list_words_wrapper=null;var list_listen_wrapper=null;var nPhrases=null;var list_phrases_wrapper=null;var phrases_collections=null;var all_input_sections=null;var all_input_sectionsDB=null;export function HeaderPhrasesList(){//console.log('HeaderPhrasesList -------------');\nvar dispatch=useDispatch();list_phrases_wrapper=useSelector(function(store){return store.list_phrases_wrapper;});phrases_collections=useSelector(function(store){return store.phrases_collections;});all_input_sections=useSelector(function(store){return store.all_input_sections;});all_input_sectionsDB=useSelector(function(store){return store.all_input_sectionsDB;});nPhrases=phrases_collections.length;//console.log('1 HeaderPhrasesList:  list_phrases_wrapper=',list_phrases_wrapper);\n//console.log('HeaderTestsList phrases_collections=',phrases_collections);\nvar work2=[];var work3='';useEffect(function(){fetch('/getAllInsertSections').then(function(response){return response.json();}).then(function(all_input_sectionsDB){//console.log('Statistics: /getAllInsertSections all_input_sectionsDB=',all_input_sectionsDB);            \ndispatch({type:'Statistics_AllInsertSectionsDB',payload:{all_input_sectionsDB:all_input_sectionsDB[0],all_input_sections:all_input_sectionsDB[0]}});});});var _loop=function _loop(kk){work3=phrases_collections[kk-1].toUpperCase();work2[kk-1]=/*#__PURE__*/_jsx(\"div\",{id:work3,class:\"menu_phrases_list\",fontSize:\"11px\",value:kk,onClick:function onClick(){dispatch({type:'HeaderPhrasesList',payload:{currentPhrases:phrases_collections[kk-1],showHideTest:'showHidePhrases',showHideWords:'showHidePhrases',showHideListen:'showHidePhrases',showHidePhrases:'showHidePhrases',showHideJokes:'showHidePhrases',showHideStatistics:'showHidePhrases',list_tests_wrapper:false,list_words_wrapper:false,list_listen_wrapper:false,phrases:'',statistics_wrapper_visibility:{display:'none'},all_input_sections:{_id:0,all_input_tests:all_input_sections.all_input_tests,all_input_words:all_input_sections.all_input_words,all_input_listen:all_input_sections.all_input_listen,all_input_phrases:all_input_sections.all_input_phrases+1,all_input_jokes:all_input_sections.all_input_jokes,all_input_statistics:all_input_sections.all_input_statistics}}});},children:work3},kk);};for(var kk=1;kk<=nPhrases;kk++){_loop(kk);}if(list_phrases_wrapper==='visible')return work2;else return null;}// end of HeaderListenList------------\n/*\n\nlet dispatch = useDispatch();  \n\nuseEffect(() => {\n  fetch('/getGreatings')\n  .then(response => response.json())\n  .then(phrases => {\n    dispatch({type: 'ShowCurrentPhrases', \n      payload: {\n        phrases: phrases\n      }\n    })\n\n  })\n});\n\n*/","map":{"version":3,"sources":["/home/test/Public/tests/src/components/headerPhrasesList/HeaderPhrasesList.js"],"names":["React","useSelector","useDispatch","useEffect","list_test_wrapper","list_words_wrapper","list_listen_wrapper","nPhrases","list_phrases_wrapper","phrases_collections","all_input_sections","all_input_sectionsDB","HeaderPhrasesList","dispatch","store","length","work2","work3","fetch","then","response","json","type","payload","kk","toUpperCase","currentPhrases","showHideTest","showHideWords","showHideListen","showHidePhrases","showHideJokes","showHideStatistics","list_tests_wrapper","phrases","statistics_wrapper_visibility","display","_id","all_input_tests","all_input_words","all_input_listen","all_input_phrases","all_input_jokes","all_input_statistics"],"mappings":"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","sourcesContent":["//HeaderPhrasesList.js------------------\n\nimport React from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { useEffect } from 'react';\n\nimport  \"./HeaderPhrasesList.css\";\n\n\nlet list_test_wrapper       = null;\n\nlet list_words_wrapper      = null;\n\nlet list_listen_wrapper     = null;\n\nlet nPhrases                = null;\n\nlet list_phrases_wrapper    = null;\n\nlet phrases_collections     = null;\n\nlet all_input_sections      = null;\n\nlet all_input_sectionsDB    = null;\n\n\nexport function HeaderPhrasesList() {\n\n//console.log('HeaderPhrasesList -------------');\n\n\n    let dispatch = useDispatch();  \n\n    \n    list_phrases_wrapper  = useSelector((store) => store.list_phrases_wrapper);\n\n    phrases_collections   = useSelector((store) => store.phrases_collections);\n\n    all_input_sections    = useSelector((store) => store.all_input_sections);\n\n    all_input_sectionsDB  = useSelector((store) => store.all_input_sectionsDB);\n\n    \n\n    nPhrases = phrases_collections.length;\n\n//console.log('1 HeaderPhrasesList:  list_phrases_wrapper=',list_phrases_wrapper);\n//console.log('HeaderTestsList phrases_collections=',phrases_collections);\n    \n    let work2 = [];\n    let work3 = '';\n\n    useEffect(() => {\n      fetch('/getAllInsertSections')\n      .then(response => response.json())\n      .then(all_input_sectionsDB => {           \n//console.log('Statistics: /getAllInsertSections all_input_sectionsDB=',all_input_sectionsDB);            \n          dispatch({type: 'Statistics_AllInsertSectionsDB', \n          payload: {\n              all_input_sectionsDB: all_input_sectionsDB[0],\n              all_input_sections:   all_input_sectionsDB[0]\n          }\n          })\n      })\n    });\n\n    for(let kk = 1; kk <= nPhrases; kk++){\n            work3 = phrases_collections[kk-1].toUpperCase();\n            work2[kk-1] =  (<div id={work3} class=\"menu_phrases_list\" \n                                               fontSize=\"11px\" \n                                               key = {kk}\n                                               value = {kk}\n                                                onClick =    {() => {   dispatch({  type: 'HeaderPhrasesList', \n                                                                                    payload: {\n                                                                                        currentPhrases:     phrases_collections[kk-1], \n                                                                                        showHideTest:       'showHidePhrases',\n                                                                                        showHideWords:      'showHidePhrases',  \n                                                                                        showHideListen:     'showHidePhrases',                                                                                  \n                                                                                        showHidePhrases:    'showHidePhrases',    \n                                                                                        showHideJokes:      'showHidePhrases',\n                                                                                        showHideStatistics: 'showHidePhrases', \n                                                                                        list_tests_wrapper: false,\n                                                                                        list_words_wrapper: false,\n                                                                                        list_listen_wrapper:false,\n                                                                                        phrases:            '',\n                                                                                        statistics_wrapper_visibility: {display: 'none'},\n                                                                                        all_input_sections:  \n                                                                                        {\n                                                                                            _id: 0,\n                                                                                            all_input_tests: all_input_sections.all_input_tests,\n                                                                                            all_input_words: all_input_sections.all_input_words,\n                                                                                            all_input_listen: all_input_sections.all_input_listen,\n                                                                                            all_input_phrases: all_input_sections.all_input_phrases + 1,\n                                                                                            all_input_jokes: all_input_sections.all_input_jokes,\n                                                                                            all_input_statistics: all_input_sections.all_input_statistics\n                                                                                        }\n                                                                                    }\n                                                                                });\n\n                                                                    }\n                                                            }\n                            >\n                                {work3}\n                            </div>)\n    }\n\n\n    if(list_phrases_wrapper === 'visible') return work2\n    else return null;\n\n\n}// end of HeaderListenList------------\n\n/*\n\nlet dispatch = useDispatch();  \n\nuseEffect(() => {\n  fetch('/getGreatings')\n  .then(response => response.json())\n  .then(phrases => {\n    dispatch({type: 'ShowCurrentPhrases', \n      payload: {\n        phrases: phrases\n      }\n    })\n\n  })\n});\n\n*/"]},"metadata":{},"sourceType":"module"}