{"ast":null,"code":"//Phrases.js------------------\n// Show Phrases\nimport React from'react';import'./Phrases.css';import{useSelector,useDispatch}from'react-redux';import{useEffect}from'react';import{ShowCurrentPhrases}from\"../showCurrentPhrases/ShowCurrentPhrases.js\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var showHidePhrases=null;var showCurrentPhrasesWork=null;var currentPhrases=null;var currentPhrasesServer=null;var phrases_wrapper_visibility=null;export function Phrases(){//console.log('Phrases +++++++++++')     \nfunction phrasesBtnListen(){//console.log('upBtn ======================================');   \nvar id_test_up='London_bgr';//console.log('current_question=',current_question);                    \nvar first_test_up=document.getElementById(id_test_up);first_test_up.scrollIntoView(true);}//phrasesBtnListen\nshowHidePhrases=useSelector(function(store){return store.showHidePhrases;});currentPhrases=useSelector(function(store){return store.currentPhrases;});phrases_wrapper_visibility=useSelector(function(store){return store.phrases_wrapper_visibility;});var dispatch=useDispatch();if(currentPhrases!==null){currentPhrasesServer='/get'+currentPhrases;}else currentPhrasesServer='/home';//console.log('Phrases: currentPhrases=',currentPhrases);\n//console.log('Phrases: currentPhrasesServer=',currentPhrasesServer);\nuseEffect(function(){fetch(currentPhrasesServer).then(function(response){return response.json();}).then(function(phrases){dispatch({type:'ShowCurrentPhrases',payload:{phrases:phrases}});});});//console.log('Phrases: showHidePhrases=',showHidePhrases);     \n//console.log('Phrases: showCurrentPhrasesWork=',showCurrentPhrasesWork);\n/*\n    if(showHidePhrases){\n        phrases_btn_visibility = {display: 'block'} \n    } else {\n        phrases_btn_visibility = {display: 'none'}; \n    } \n*/var phrases_button=/*#__PURE__*/_jsx(\"button\",{id:\"footerBtnListen\",onClick:phrasesBtnListen,children:\"UP\"});if(showHidePhrases==='showHidePhrases')showCurrentPhrasesWork=/*#__PURE__*/_jsx(ShowCurrentPhrases,{});else{showCurrentPhrasesWork=null;phrases_button=null;}return/*#__PURE__*/_jsxs(\"section\",{id:\"phrases_wrapper\",children:[showCurrentPhrasesWork,phrases_button]});}//end of Phrases.js","map":{"version":3,"sources":["/home/test/Public/tests/src/components/phrases/Phrases.js"],"names":["React","useSelector","useDispatch","useEffect","ShowCurrentPhrases","showHidePhrases","showCurrentPhrasesWork","currentPhrases","currentPhrasesServer","phrases_wrapper_visibility","Phrases","phrasesBtnListen","id_test_up","first_test_up","document","getElementById","scrollIntoView","store","dispatch","fetch","then","response","json","phrases","type","payload","phrases_button"],"mappings":"AAAA;AACA;AAEA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAO,eAAP,CAEA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CAEA,OAASC,SAAT,KAA0B,OAA1B,CAEA,OAAUC,kBAAV,KAAoC,6CAApC,C,wFAEA,GAAIC,CAAAA,eAAe,CAAe,IAAlC,CAEA,GAAIC,CAAAA,sBAAsB,CAAQ,IAAlC,CAEA,GAAIC,CAAAA,cAAc,CAAgB,IAAlC,CAEA,GAAIC,CAAAA,oBAAoB,CAAU,IAAlC,CAEA,GAAIC,CAAAA,0BAA0B,CAAI,IAAlC,CAGA,MAAO,SAASC,CAAAA,OAAT,EAAmB,CAC1B;AAEI,QAASC,CAAAA,gBAAT,EAA2B,CAC3B;AAEQ,GAAIC,CAAAA,UAAU,CAAG,YAAjB,CACR;AACQ,GAAIC,CAAAA,aAAa,CAAGC,QAAQ,CAACC,cAAT,CAAwBH,UAAxB,CAApB,CAEAC,aAAa,CAACG,cAAd,CAA6B,IAA7B,EAEP;AAGDX,eAAe,CAAGJ,WAAW,CAAC,SAACgB,KAAD,QAAWA,CAAAA,KAAK,CAACZ,eAAjB,EAAD,CAA7B,CAEAE,cAAc,CAAGN,WAAW,CAAC,SAACgB,KAAD,QAAWA,CAAAA,KAAK,CAACV,cAAjB,EAAD,CAA5B,CAEAE,0BAA0B,CAAGR,WAAW,CAAC,SAACgB,KAAD,QAAWA,CAAAA,KAAK,CAACR,0BAAjB,EAAD,CAAxC,CAEA,GAAIS,CAAAA,QAAQ,CAAGhB,WAAW,EAA1B,CAEA,GAAGK,cAAc,GAAK,IAAtB,CAA4B,CACxBC,oBAAoB,CAAG,OAASD,cAAhC,CACH,CAFD,IAEOC,CAAAA,oBAAoB,CAAG,OAAvB,CAGX;AACA;AAIIL,SAAS,CAAC,UAAM,CACZgB,KAAK,CAACX,oBAAD,CAAL,CACCY,IADD,CACM,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAT,EAAJ,EADd,EAECF,IAFD,CAEM,SAAAG,OAAO,CAAI,CACbL,QAAQ,CAAC,CAACM,IAAI,CAAE,oBAAP,CACTC,OAAO,CAAE,CACLF,OAAO,CAAEA,OADJ,CADA,CAAD,CAAR,CAMH,CATD,EAUH,CAXQ,CAAT,CAaJ;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,EACI,GAAIG,CAAAA,cAAc,cAAG,eAAQ,EAAE,CAAC,iBAAX,CAA8B,OAAO,CAAGf,gBAAxC,gBAArB,CAEA,GAAGN,eAAe,GAAK,iBAAvB,CAA0CC,sBAAsB,cAAG,KAAC,kBAAD,IAAzB,CAA1C,IACK,CACDA,sBAAsB,CAAG,IAAzB,CACAoB,cAAc,CAAW,IAAzB,CACH,CAED,mBAAO,iBAAS,EAAE,CAAC,iBAAZ,WAEFpB,sBAFE,CAGFoB,cAHE,GAAP,CAMH","sourcesContent":["//Phrases.js------------------\n// Show Phrases\n\nimport React from 'react';\n\nimport './Phrases.css';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { useEffect } from 'react';\n\nimport  { ShowCurrentPhrases } from \"../showCurrentPhrases/ShowCurrentPhrases.js\";\n\nlet showHidePhrases             = null;\n\nlet showCurrentPhrasesWork      = null;\n\nlet currentPhrases              = null;\n\nlet currentPhrasesServer        = null;\n\nlet phrases_wrapper_visibility  = null;\n\n\nexport function Phrases() {\n//console.log('Phrases +++++++++++')     \n\n    function phrasesBtnListen(){            \n    //console.log('upBtn ======================================');   \n    \n            let id_test_up = 'London_bgr';  \n    //console.log('current_question=',current_question);                    \n            let first_test_up = document.getElementById(id_test_up);\n    \n            first_test_up.scrollIntoView(true);\n        \n    }//phrasesBtnListen\n    \n\n    showHidePhrases = useSelector((store) => store.showHidePhrases);\n\n    currentPhrases = useSelector((store) => store.currentPhrases);\n\n    phrases_wrapper_visibility = useSelector((store) => store.phrases_wrapper_visibility);\n\n    let dispatch = useDispatch();\n    \n    if(currentPhrases !== null) {\n        currentPhrasesServer = '/get' + currentPhrases;\n    } else currentPhrasesServer = '/home';\n\n\n//console.log('Phrases: currentPhrases=',currentPhrases);\n//console.log('Phrases: currentPhrasesServer=',currentPhrasesServer);\n\n\n\n    useEffect(() => {\n        fetch(currentPhrasesServer)\n        .then(response => response.json())\n        .then(phrases => {\n            dispatch({type: 'ShowCurrentPhrases', \n            payload: {\n                phrases: phrases\n            }\n            })\n\n        })\n    });\n\n//console.log('Phrases: showHidePhrases=',showHidePhrases);     \n//console.log('Phrases: showCurrentPhrasesWork=',showCurrentPhrasesWork);\n\n/*\n    if(showHidePhrases){\n        phrases_btn_visibility = {display: 'block'} \n    } else {\n        phrases_btn_visibility = {display: 'none'}; \n    } \n*/\n    let phrases_button = <button id='footerBtnListen'  onClick= {phrasesBtnListen}>UP</button>;\n\n    if(showHidePhrases === 'showHidePhrases') showCurrentPhrasesWork = <ShowCurrentPhrases />\n    else {\n        showCurrentPhrasesWork = null;\n        phrases_button         = null;\n    } \n\n    return <section id=\"phrases_wrapper\">\n\n        {showCurrentPhrasesWork}\n        {phrases_button}\n\n    </section>    \n}//end of Phrases.js\n\n"]},"metadata":{},"sourceType":"module"}