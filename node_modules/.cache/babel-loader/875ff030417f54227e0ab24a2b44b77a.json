{"ast":null,"code":"//ShowCurrentTest.js:   show curent test--------------------------\nimport React,{useEffect}from\"react\";import'./ShowCurrentTest.css';import{QuestionTest}from\"../questionTest/QuestionTest.js\";import{AnswerTest}from\"../answerTest/AnswerTest.js\";import{FooterQuestion}from\"../footerQuestion/FooterQuestion.js\";import{useSelector,useDispatch}from'react-redux';//import  \"../scrollToTopBtn/scrollToTopBtn.css\";\n//import  \"../scrollToTopBtn/scrollToTopBtn.js\";\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var count_time_question=null;var count_time_test=null;var X_setInterval=0;var correct_answer=null;var tests=null;var count_correct_answer=null;var countDownDate=null;var countDownDate_qst=null;// start time for the chose question\nvar current_question=0;var currentTest=null;var count_questions_test=null;var state_green_red=null;var selected_answer=-1;var firstTimer=null;var state_count_time_test=null;// time of all test for every question\nvar state_count_time_question=null;// time for every question\nvar state_test=null;var WHY_botton_visibility=null;var setYellowAnswer=null;//set yellow color for active questions\nexport function ShowCurrentTest(){//show current test --------------------------------------------------------\n//console.log('ShowCurrentTest: +++++++++++++');    \n// handleChange - choosing an answer for the question  ---------------------------------------------\nfunction handleChange(evt){//evt.par1 - number of the current question; evt.par2 - selected answer.\nconsole.log('ShowCurrentTest: handleChange:  evt=',evt);//console.log('1 ShowCurrentTest: handleChange:  state_test=',state_test); \nif(evt.par1===current_question){firstTimer=evt.par4;X_setInterval=evt.par3;var _selected_answer=-1;//        let arr_state_test_new = null;\n//        let arr_state_green_red_new = null; // = [user answer, correct answer]     \nvar li_number=null;//selected answer  in the array   \nif(state_test[evt.par1]===true)state_test[evt.par1]=false;//console.log('1 ShowCurrentTest: handleChange:  state_test=',state_test);         \nif(state_test[evt.par1]===false){//          arr_state_test_new = state_test.slice();\n//          arr_state_green_red_new = state_green_red.slice(); // = [user answer, correct answer]     \nli_number=evt.par2-1;//selected answer  in the array\ncurrent_question=evt.par1;// number of the current question\n_selected_answer=li_number;//selected answer in the array of answers\nvar id_input=\"id\"+String(current_question*10+li_number);correct_answer=Number(tests[currentTest][current_question].C_A)-1;state_green_red[current_question]=[li_number,correct_answer];//console.log('ShowCurrentTest: handleChange:  correct_answer=',correct_answer, '  selected_answer=',selected_answer);                 \nvar id_correct=\"id\"+String(current_question*10+correct_answer);//(correct_answer - 1));\nif(id_input===id_correct){count_correct_answer[current_question]=count_correct_answer[current_question]+1;}//console.log('1 ShowCurrentTest: handleChange:  before clearInterval: X_setInterval=',X_setInterval);                 \nclearInterval(X_setInterval);//console.log('1 ShowCurrentTest: handleChange:  after clearInterval: X_setInterval=',X_setInterval);                           \nfirstTimer=null;countDownDate_qst=new Date().getTime();// start time for the chose question      \ncurrent_question++;// go next question\nif(current_question<count_questions_test){var _ID_work='ID'+current_question+currentTest*100+'_time_test';var ID_next='ID'+(current_question+1)+currentTest*100+'_time_question';//            state_test[current_question] = false;\n//console.log('1 ShowCurrentTest: handleChange: before startWatch4:  X_setInterval=',X_setInterval);  \nstartWatch4(ID_next,_ID_work,current_question,firstTimer,countDownDate_qst,X_setInterval);// start time for next question\n}//if\nelse firstTimer=true;//console.log('2 ShowCurrentTest: handleChange: after startWatch4: X_setInterval=',X_setInterval);                 \n}// if\n//console.log('2 ShowCurrentTest: handleChange:  state_test=',state_test);\n}//if\ndispatch({type:'ShowCurrentTest_handleChange',payload:{state_green_red:state_green_red,state_test:state_test,current_question:current_question,selected_answer:selected_answer,count_correct_answer:count_correct_answer,firstTimer:firstTimer,countDownDate_qst:countDownDate_qst}});}//--- end handleChange --------------------------------------------------------------       \n// startWatch4 -  timer of common time for the choosing question; insert in ID_TIME element\n//    ID_time_test - ID for question time\n// Update the count down every 1 second\nfunction startWatch4(ID_TIME,ID_time_test,current_question,firstTimer,countDownDate_qst,X_setInterval){//----------------------------------\n//console.log('ShowCurrentTest: startWatch4: +++++++++');\n//console.log('3 ShowCurrentTest: startWatch4:  state_test=',state_test);  \n// sumMinSec - sum minutes and seconds of all test; return -  minutes:seconds              \nfunction sumMinSec(count_time_test_work,count_time_quest){//-------------\n//console.log('3 ShowCurrentTest: startWatch4: sumMinSec: count_time_test_work=',count_time_test_work);           \nvar pos=-1,minutes=0,seconds=0;//    console.log('ShowCurrentTest: startWatch4: sumMinSec: 1 count_time_test_work=',count_time_test_work,'  count_time_quest.indexOf(:)=',count_time_quest.indexOf(':'));\npos=count_time_quest.indexOf(':');//console.log('pos=',pos);          \nif(pos>0){minutes=Number(count_time_quest.slice(0,pos));seconds=Number(count_time_quest.slice(pos+1));}else{minutes=0;seconds=0;}//console.log('2 count_time_test_work=',count_time_test_work,'  count_time_quest=',count_time_quest) \npos=count_time_test_work.indexOf(':');if(pos>0){minutes+=Number(count_time_test_work.slice(0,pos));seconds+=Number(count_time_test_work.slice(pos+1));}if(seconds>=60){minutes+=Math.floor(seconds/60);seconds=seconds-Math.floor(seconds/60)*60;}if(minutes<10){minutes='0'+minutes;}if(seconds<10){seconds='0'+seconds;}//console.log('4 ShowCurrentTest: startWatch4: sumMinSec:  end: minutes=',minutes,'  seconds=',seconds)\nreturn minutes+':'+seconds;}//--- end of sumMinSec  --------------------------------------------\nvar work;var now;var distance;var minutes;var seconds;//console.log('5 ShowCurrentTest: startWatch4: count_time_test=',count_time_test, '  firstTimer=',firstTimer);\n//        clearInterval(X_setInterval);\n//console.log('ShowCurrentTest: startWatch4: count_time_test=',count_time_test);    \n//console.log('ShowCurrentTest: current_question=',current_question);    \n//console.log('ShowCurrentTest: startWatch4: time_work2=',time_work2);            \nif(current_question===0)count_time_test[current_question]=count_time_question[current_question];else if(count_time_test[current_question]==='00:00'){count_time_test[current_question]=count_time_test[current_question-1];}//console.log('0 ShowCurrentTest: startWatch4: count_time_test=',count_time_test, '  current_question=',current_question, '  firstTimer=',firstTimer);    \nif(firstTimer===null){//=============================================================               \nif(current_question>0)clearInterval(X_setInterval);X_setInterval=setInterval(function(){//++++++++++++++++++++++++++\n// Get today's date and time\nnow=new Date().getTime();// Find the distance between now and the count down date\ndistance=now-countDownDate_qst;//console.log('ShowCurrentTest: startWatch4:  distance ==== ', distance, '  now=',now, '  countDownDate_qst=', countDownDate_qst);\t      \n// Time calculations for days, hours, minutes and seconds\nminutes=Math.floor(distance%(1000*60*60)/(1000*60));seconds=Math.floor(distance%(1000*60)/1000);// Display the result in the element with id=\"demo\"\n//  document.getElementById(ID_TIME).innerHTML = days + \"d \" + hours + \"h \"\n//  + minutes + \"m \" + seconds + \"s \";\n//console.log('ShowCurrentTest: startWatch4:  1 ID_TIME ==== ', ID_TIME,  '   minutes = ' + minutes, '   seconds = ' + seconds);\t\n//            work = count_questions_test;  //work = document.getElementById(ID_TIME);\nif(minutes<10){minutes='0'+minutes;}if(seconds<10){seconds='0'+seconds;}count_time_question[current_question]=minutes+\":\"+seconds;//            let work_count_time_question = minutes + \":\" + seconds;\n//            if(work !== null) {\n//            count_time_question[time_work] = work_count_time_question;  //count_time_question[time_work]; \n//            }\n//console.log('ShowCurrentTest: startWatch4: count_time_question=',count_time_question, '  distance=',distance)\n// If the count down is finished, write some text\nif(distance<0){//console.log('3 ShowCurrentTest: startWatch4:  before clearInterval: X_setInterval=',X_setInterval);                 \nclearInterval(X_setInterval);//console.log('3 ShowCurrentTest: startWatch4:  after clearInterval: X_setInterval=',X_setInterval); \n}if(current_question===0)count_time_test[current_question]=count_time_question[current_question];else{//              count_time_test[current_question] = count_time_test[current_question] + count_time_test[current_question-1];\n//console.log('1 ShowCurrentTest: 1 count_time_test[current_question1]=',count_time_test[current_question],'  current_question1=',current_question);\ncount_time_test[current_question]=sumMinSec(count_time_test[current_question],'00:01');//console.log('2 ShowCurrentTest: 1 count_time_test[current_question]=',count_time_test[current_question]); \n}//console.log('ShowCurrentTest: startWatch4:  X_setInterval=',X_setInterval);  \ndispatch({type:'ShowCurrentTest_startWatch4',payload:{count_time_question:count_time_question,count_time_test:count_time_test}});},1000);//++++++++++++++++++++++++++\ndispatch({type:'ShowCurrentTest_startWatch4_2',payload:{X_setInterval:X_setInterval,firstTimer:true}});//console.log('4 ShowCurrentTest: end of startWatch4:  X_setInterval=',X_setInterval);  \n}//if =================================================================================\n//console.log('4 ShowCurrentTest: startWatch4:  state_test=',state_test);  \n}//---end of startWatch4  -------------------------------------------------------\n//console.log('5 ShowCurrentTest:   state_test=',state_test); \ncorrect_answer=useSelector(function(store){return store.correct_answer;});tests=useSelector(function(store){return store.tests;});count_correct_answer=useSelector(function(store){return store.count_correct_answer;});countDownDate=useSelector(function(store){return store.countDownDate;});countDownDate_qst=useSelector(function(store){return store.countDownDate_qst;});X_setInterval=useSelector(function(store){return store.X_setInterval;});current_question=useSelector(function(store){return store.current_question;});currentTest=useSelector(function(store){return store.currentTest;});count_questions_test=useSelector(function(store){return store.count_questions_test;});//the count of questions in the test\ncount_time_question=useSelector(function(store){return store.count_time_question;}).slice();count_time_test=useSelector(function(store){return store.count_time_test;}).slice();firstTimer=useSelector(function(store){return store.firstTimer;});// firstTimer = null (start timer), firstTimer = true (stop timer)\nstate_test=useSelector(function(store){return store.state_test;});state_green_red=useSelector(function(store){return store.state_green_red;}).slice();WHY_botton_visibility=useSelector(function(store){return store.WHY_botton_visibility;});setYellowAnswer=useSelector(function(store){return store.setYellowAnswer;});//console.log('6 ShowCurrentTest:   state_test=',state_test); \nvar dispatch=useDispatch();var ID_time;// ID for time_test\nvar ID_time_qst;// ID for time_tests_qst\nvar ID_work;// show  TESTS\n//    countDownDate = new Date().getTime(); // start time for the chose test\nuseEffect(function(){var id_test1='ID0'+currentTest*100+'_question_cont';var el_a=document.getElementById(id_test1);var event=new Event('click');el_a.dispatchEvent(event);});var element=[];var opacity_val=null;setYellowAnswer=Array(count_questions_test).fill('no_li_class no_pointer');// it is the class with yellow color (cover pointer)\nsetYellowAnswer[current_question]='li_class pointer';//console.log('ShowCurrentTest:   current_question=',current_question);   \nfor(var ii=0;ii<count_questions_test;ii++){// show all questions for the test\nID_work='ID'+ii+currentTest*100+'_question_cont';if(current_question===ii)opacity_val={opacity:1};//current question\nelse opacity_val={opacity:0.5};if(state_test[count_questions_test-1]===false){opacity_val={opacity:1};//end of choosing all answers\n}//console.log('2 ShowCurrentTest:   state_test=',state_test);          \nelement[ii]=/*#__PURE__*/_jsxs(\"div\",{id:ID_work,className:\"question_cont\",style:opacity_val,children:[/*#__PURE__*/_jsx(QuestionTest,{numberQuestion:ii}),/*#__PURE__*/_jsx(AnswerTest,{numberQuestion:ii,classLi:setYellowAnswer[ii],func:function func(e){return handleChange(e);}}),/*#__PURE__*/_jsx(FooterQuestion,{numberQuestion:ii})]},ID_work);}// for\nID_time='ID'+current_question+currentTest*100+'_time_question';ID_time_qst='ID'+current_question+currentTest*100+'_time_test';startWatch4(ID_time,ID_time_qst,current_question,firstTimer,countDownDate_qst,X_setInterval);// start time for 0-th question  \n//console.log('7 ShowCurrentTest:   state_test=',state_test); \n//    window.location.hash = 'tests_wrapper';\nreturn element;}//--- end of ShowCurrentTest -----------------------------------------------------","map":{"version":3,"sources":["/home/test/Public/tests/src/components/showCurrentTest/ShowCurrentTest.js"],"names":["React","useEffect","QuestionTest","AnswerTest","FooterQuestion","useSelector","useDispatch","count_time_question","count_time_test","X_setInterval","correct_answer","tests","count_correct_answer","countDownDate","countDownDate_qst","current_question","currentTest","count_questions_test","state_green_red","selected_answer","firstTimer","state_count_time_test","state_count_time_question","state_test","WHY_botton_visibility","setYellowAnswer","ShowCurrentTest","handleChange","evt","console","log","par1","par4","par3","li_number","par2","id_input","String","Number","C_A","id_correct","clearInterval","Date","getTime","ID_work","ID_next","startWatch4","dispatch","type","payload","ID_TIME","ID_time_test","sumMinSec","count_time_test_work","count_time_quest","pos","minutes","seconds","indexOf","slice","Math","floor","work","now","distance","setInterval","store","ID_time","ID_time_qst","id_test1","el_a","document","getElementById","event","Event","dispatchEvent","element","opacity_val","Array","fill","ii","opacity","e"],"mappings":"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","sourcesContent":["//ShowCurrentTest.js:   show curent test--------------------------\r\n\r\nimport React, {useEffect} from \"react\";\r\n\r\nimport './ShowCurrentTest.css';\r\n\r\nimport {QuestionTest} from \"../questionTest/QuestionTest.js\";\r\n\r\nimport {AnswerTest} from \"../answerTest/AnswerTest.js\";\r\n\r\nimport {FooterQuestion} from \"../footerQuestion/FooterQuestion.js\";\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n//import  \"../scrollToTopBtn/scrollToTopBtn.css\";\r\n\r\n//import  \"../scrollToTopBtn/scrollToTopBtn.js\";\r\n\r\n\r\nlet count_time_question       = null;\r\nlet count_time_test           = null;\r\nlet X_setInterval             = 0;\r\nlet correct_answer            = null;\r\nlet tests                     = null;\r\nlet count_correct_answer      = null;\r\nlet countDownDate             = null;\r\nlet countDownDate_qst         = null; // start time for the chose question\r\nlet current_question          = 0;\r\nlet currentTest               = null;\r\nlet count_questions_test      = null;\r\nlet state_green_red           = null;\r\nlet selected_answer           = -1;\r\nlet firstTimer                = null;\r\nlet state_count_time_test     = null; // time of all test for every question\r\nlet state_count_time_question = null; // time for every question\r\nlet state_test                = null;\r\nlet WHY_botton_visibility     = null;\r\nlet setYellowAnswer           = null; //set yellow color for active questions\r\n\r\nexport function ShowCurrentTest(){   //show current test --------------------------------------------------------\r\n\r\n//console.log('ShowCurrentTest: +++++++++++++');    \r\n\r\n  // handleChange - choosing an answer for the question  ---------------------------------------------\r\n  function handleChange(evt){  //evt.par1 - number of the current question; evt.par2 - selected answer.\r\nconsole.log('ShowCurrentTest: handleChange:  evt=',evt);  \r\n//console.log('1 ShowCurrentTest: handleChange:  state_test=',state_test); \r\n    if(evt.par1 === current_question){\r\n        firstTimer = evt.par4;\r\n        X_setInterval = evt.par3;\r\n\r\n        let selected_answer = -1;\r\n//        let arr_state_test_new = null;\r\n//        let arr_state_green_red_new = null; // = [user answer, correct answer]     \r\n        let li_number = null; //selected answer  in the array   \r\n\r\n        if(state_test[evt.par1] === true) state_test[evt.par1] = false;            \r\n//console.log('1 ShowCurrentTest: handleChange:  state_test=',state_test);         \r\n\r\n        if(state_test[evt.par1] === false) {\r\n//          arr_state_test_new = state_test.slice();\r\n//          arr_state_green_red_new = state_green_red.slice(); // = [user answer, correct answer]     \r\n          li_number = evt.par2 - 1; //selected answer  in the array\r\n          \r\n          current_question = evt.par1;    // number of the current question\r\n    \r\n          selected_answer = li_number; //selected answer in the array of answers\r\n    \r\n          let id_input = \"id\" + String(current_question*10 + li_number);\r\n          correct_answer = Number(tests[currentTest][current_question].C_A) - 1; \r\n          state_green_red[current_question] = [li_number, correct_answer];\r\n//console.log('ShowCurrentTest: handleChange:  correct_answer=',correct_answer, '  selected_answer=',selected_answer);                 \r\n          let id_correct =  \"id\" + String(current_question*10 + correct_answer);//(correct_answer - 1));\r\n    \r\n          if(id_input === id_correct){\r\n            count_correct_answer[current_question] = count_correct_answer[current_question] + 1; \t\r\n          }\r\n    \r\n//console.log('1 ShowCurrentTest: handleChange:  before clearInterval: X_setInterval=',X_setInterval);                 \r\n          clearInterval(X_setInterval);       \r\n//console.log('1 ShowCurrentTest: handleChange:  after clearInterval: X_setInterval=',X_setInterval);                           \r\n\r\n          firstTimer = null;\r\n\r\n          countDownDate_qst   = new Date().getTime(); // start time for the chose question      \r\n                    \r\n          current_question++; // go next question\r\n\r\n          if(current_question < count_questions_test) {\r\n            let ID_work = 'ID'+ current_question + currentTest*100 + '_time_test';\r\n            let ID_next = ('ID'+ (current_question + 1)) + currentTest*100 +  '_time_question';\r\n//            state_test[current_question] = false;\r\n//console.log('1 ShowCurrentTest: handleChange: before startWatch4:  X_setInterval=',X_setInterval);  \r\n\r\n            startWatch4(ID_next, ID_work, current_question, firstTimer, countDownDate_qst, X_setInterval); // start time for next question\r\n          }//if\r\n          else (\r\n            firstTimer = true\r\n          )  \r\n\r\n//console.log('2 ShowCurrentTest: handleChange: after startWatch4: X_setInterval=',X_setInterval);                 \r\n        }// if\r\n//console.log('2 ShowCurrentTest: handleChange:  state_test=',state_test);\r\n    }//if\r\n        dispatch({type: 'ShowCurrentTest_handleChange',  \r\n            payload: {\r\n                state_green_red:      state_green_red, \r\n                state_test:           state_test,\r\n                current_question:     current_question,\r\n                selected_answer:      selected_answer,\r\n                count_correct_answer: count_correct_answer,\r\n                firstTimer:           firstTimer,\r\n                countDownDate_qst:    countDownDate_qst\r\n            }\r\n        }); \r\n\r\n      } //--- end handleChange --------------------------------------------------------------       \r\n    \r\n    \r\n      // startWatch4 -  timer of common time for the choosing question; insert in ID_TIME element\r\n      //    ID_time_test - ID for question time\r\n      // Update the count down every 1 second\r\n      function startWatch4(ID_TIME, ID_time_test, current_question, firstTimer, countDownDate_qst, X_setInterval) {  //----------------------------------\r\n//console.log('ShowCurrentTest: startWatch4: +++++++++');\r\n//console.log('3 ShowCurrentTest: startWatch4:  state_test=',state_test);  \r\n\r\n      // sumMinSec - sum minutes and seconds of all test; return -  minutes:seconds              \r\n        function sumMinSec(count_time_test_work, count_time_quest) {  //-------------\r\n//console.log('3 ShowCurrentTest: startWatch4: sumMinSec: count_time_test_work=',count_time_test_work);           \r\n          let pos=-1, minutes=0, seconds=0;\r\n//    console.log('ShowCurrentTest: startWatch4: sumMinSec: 1 count_time_test_work=',count_time_test_work,'  count_time_quest.indexOf(:)=',count_time_quest.indexOf(':'));\r\n    \r\n          pos = count_time_quest.indexOf(':');\r\n//console.log('pos=',pos);          \r\n          if (pos > 0) {\r\n            minutes = Number(count_time_quest.slice(0, pos));\r\n            seconds = Number(count_time_quest.slice(pos+1));\r\n          } else {\r\n            minutes = 0;\r\n            seconds = 0;\r\n          }\r\n//console.log('2 count_time_test_work=',count_time_test_work,'  count_time_quest=',count_time_quest) \r\n          pos = count_time_test_work.indexOf(':');\r\n          if (pos > 0) {\r\n            minutes += Number(count_time_test_work.slice(0, pos));\r\n            seconds += Number(count_time_test_work.slice(pos+1));\r\n          } \r\n        \r\n          if (seconds >= 60) {\r\n            minutes += Math.floor(seconds / 60);\r\n            seconds = seconds - (Math.floor(seconds / 60) * 60);\r\n          }\r\n    \r\n          if (minutes < 10) {\r\n            minutes = '0' + minutes;\r\n          }\r\n    \r\n          if (seconds < 10) {\r\n            seconds = '0' + seconds;\r\n          }\r\n//console.log('4 ShowCurrentTest: startWatch4: sumMinSec:  end: minutes=',minutes,'  seconds=',seconds)\r\n          return minutes + ':' + seconds;\r\n          \r\n        } //--- end of sumMinSec  --------------------------------------------\r\n\r\n        let work;\r\n        let now;\r\n        let distance;\r\n        let minutes;\r\n        let seconds;\r\n\r\n//console.log('5 ShowCurrentTest: startWatch4: count_time_test=',count_time_test, '  firstTimer=',firstTimer);\r\n//        clearInterval(X_setInterval);\r\n//console.log('ShowCurrentTest: startWatch4: count_time_test=',count_time_test);    \r\n//console.log('ShowCurrentTest: current_question=',current_question);    \r\n\r\n//console.log('ShowCurrentTest: startWatch4: time_work2=',time_work2);            \r\n        if(current_question === 0) count_time_test[current_question] = count_time_question[current_question]\r\n        else \r\n        if(count_time_test[current_question] === '00:00'){     \r\n          count_time_test[current_question] = count_time_test[current_question - 1];\r\n        }\r\n\r\n//console.log('0 ShowCurrentTest: startWatch4: count_time_test=',count_time_test, '  current_question=',current_question, '  firstTimer=',firstTimer);    \r\n\r\n        if(firstTimer === null) {//=============================================================               \r\n          if(current_question > 0) clearInterval(X_setInterval);       \r\n          X_setInterval = setInterval(function() { //++++++++++++++++++++++++++\r\n          // Get today's date and time\r\n            now = new Date().getTime();\r\n      \r\n          // Find the distance between now and the count down date\r\n            distance = now - countDownDate_qst;\r\n//console.log('ShowCurrentTest: startWatch4:  distance ==== ', distance, '  now=',now, '  countDownDate_qst=', countDownDate_qst);\t      \r\n          // Time calculations for days, hours, minutes and seconds\r\n            minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n            seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n        \r\n          // Display the result in the element with id=\"demo\"\r\n        //  document.getElementById(ID_TIME).innerHTML = days + \"d \" + hours + \"h \"\r\n        //  + minutes + \"m \" + seconds + \"s \";\r\n//console.log('ShowCurrentTest: startWatch4:  1 ID_TIME ==== ', ID_TIME,  '   minutes = ' + minutes, '   seconds = ' + seconds);\t\r\n      \r\n//            work = count_questions_test;  //work = document.getElementById(ID_TIME);\r\n      \r\n            if (minutes < 10) {\r\n              minutes = '0' + minutes;\r\n            }\r\n            if (seconds < 10) {\r\n              seconds = '0' + seconds;\r\n            }  \r\n      \r\n            count_time_question[current_question] = minutes + \":\" + seconds;\r\n//            let work_count_time_question = minutes + \":\" + seconds;\r\n        \r\n//            if(work !== null) {\r\n//            count_time_question[time_work] = work_count_time_question;  //count_time_question[time_work]; \r\n//            }\r\n        \r\n//console.log('ShowCurrentTest: startWatch4: count_time_question=',count_time_question, '  distance=',distance)\r\n            // If the count down is finished, write some text\r\n            if(distance < 0) {\r\n//console.log('3 ShowCurrentTest: startWatch4:  before clearInterval: X_setInterval=',X_setInterval);                 \r\n              clearInterval(X_setInterval);       \r\n//console.log('3 ShowCurrentTest: startWatch4:  after clearInterval: X_setInterval=',X_setInterval); \r\n            }\r\n        \r\n            if(current_question === 0) count_time_test[current_question] = count_time_question[current_question]\r\n            else {\r\n              \r\n//              count_time_test[current_question] = count_time_test[current_question] + count_time_test[current_question-1];\r\n//console.log('1 ShowCurrentTest: 1 count_time_test[current_question1]=',count_time_test[current_question],'  current_question1=',current_question);\r\n              count_time_test[current_question] = sumMinSec(count_time_test[current_question],'00:01');\r\n//console.log('2 ShowCurrentTest: 1 count_time_test[current_question]=',count_time_test[current_question]); \r\n            }\r\n//console.log('ShowCurrentTest: startWatch4:  X_setInterval=',X_setInterval);  \r\n      \r\n            dispatch({type: 'ShowCurrentTest_startWatch4', \r\n              payload: {          \r\n                      count_time_question:  count_time_question, \r\n                      count_time_test:      count_time_test\r\n              }\r\n            });  \r\n          \r\n          }, 1000);//++++++++++++++++++++++++++\r\n\r\n          dispatch({type: 'ShowCurrentTest_startWatch4_2', \r\n            payload: {          \r\n                  X_setInterval:        X_setInterval,\r\n                  firstTimer:           true\r\n            }\r\n          });  \r\n      \r\n//console.log('4 ShowCurrentTest: end of startWatch4:  X_setInterval=',X_setInterval);  \r\n      }//if =================================================================================\r\n\r\n//console.log('4 ShowCurrentTest: startWatch4:  state_test=',state_test);  \r\n        \r\n      }//---end of startWatch4  -------------------------------------------------------\r\n    \r\n//console.log('5 ShowCurrentTest:   state_test=',state_test); \r\n\r\n    correct_answer        = useSelector((store) => store.correct_answer);\r\n    tests                 = useSelector((store) => store.tests);   \r\n    count_correct_answer  = useSelector((store) => store.count_correct_answer);\r\n    countDownDate         = useSelector((store) => store.countDownDate);\r\n    countDownDate_qst     = useSelector((store) => store.countDownDate_qst);\r\n    X_setInterval         = useSelector((store) => store.X_setInterval);\r\n    current_question      = useSelector((store) => store.current_question);\r\n    currentTest           = useSelector((store) => store.currentTest);\r\n    count_questions_test  = useSelector((store) => store.count_questions_test); //the count of questions in the test\r\n    count_time_question   = (useSelector((store) => store.count_time_question)).slice();\r\n    count_time_test       = (useSelector((store) => store.count_time_test)).slice();\r\n    firstTimer            = useSelector((store) => store.firstTimer); // firstTimer = null (start timer), firstTimer = true (stop timer)\r\n    state_test            = useSelector((store) => store.state_test);\r\n    state_green_red       = (useSelector((store) => store.state_green_red)).slice();\r\n    WHY_botton_visibility = useSelector((store) => store.WHY_botton_visibility);\r\n    setYellowAnswer       = useSelector((store) => store.setYellowAnswer);\r\n\r\n        \r\n//console.log('6 ShowCurrentTest:   state_test=',state_test); \r\n\r\n    let dispatch = useDispatch();   \r\n\r\n    let ID_time; // ID for time_test\r\n    let ID_time_qst; // ID for time_tests_qst\r\n    let ID_work;\r\n\r\n\r\n    // show  TESTS\r\n//    countDownDate = new Date().getTime(); // start time for the chose test\r\n\r\n    useEffect(() => {\r\n      let id_test1 = 'ID0' + currentTest*100 + '_question_cont';\r\n\r\n      let el_a = document.getElementById(id_test1);\r\n\r\n      let event = new Event('click');\r\n\r\n      el_a.dispatchEvent(event);\r\n    })\r\n\r\n    let element = [];\r\n\r\n    let opacity_val = null;\r\n\r\n\r\n    setYellowAnswer = Array(count_questions_test).fill('no_li_class no_pointer');// it is the class with yellow color (cover pointer)\r\n    setYellowAnswer[current_question] = 'li_class pointer';\r\n//console.log('ShowCurrentTest:   current_question=',current_question);   \r\n\r\n    for(let ii=0; ii < count_questions_test; ii++) { // show all questions for the test\r\n        ID_work = 'ID'+ ii + currentTest*100 +  '_question_cont';  \r\n        if (current_question === ii) opacity_val = {opacity: 1} //current question\r\n        else opacity_val = {opacity: 0.5};\r\n        if(state_test[count_questions_test-1] === false) {\r\n          opacity_val = {opacity: 1}; //end of choosing all answers\r\n        }\r\n\r\n//console.log('2 ShowCurrentTest:   state_test=',state_test);          \r\n        element[ii] = (\r\n          <div key={ID_work} id={ID_work} className=\"question_cont\" style={opacity_val}>\r\n            <QuestionTest numberQuestion={ii} />\r\n            <AnswerTest numberQuestion={ii} classLi={setYellowAnswer[ii]} func={(e) => handleChange(e)} />\r\n            <FooterQuestion numberQuestion={ii} />\r\n          </div>\r\n        )\r\n    }  // for\r\n\r\n\r\n    ID_time = 'ID'+ current_question + currentTest*100 + '_time_question';\r\n    ID_time_qst = 'ID'+ current_question + currentTest*100 + '_time_test';\r\n\r\n    startWatch4(ID_time, ID_time_qst, current_question, firstTimer, countDownDate_qst, X_setInterval); // start time for 0-th question  \r\n           \r\n//console.log('7 ShowCurrentTest:   state_test=',state_test); \r\n    \r\n//    window.location.hash = 'tests_wrapper';\r\n\r\n    return element;\r\n\r\n} //--- end of ShowCurrentTest -----------------------------------------------------"]},"metadata":{},"sourceType":"module"}